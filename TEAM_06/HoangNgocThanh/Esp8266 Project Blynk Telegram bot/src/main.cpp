// Blynk authentication
#define BLYNK_TEMPLATE_ID "TMPL6uZv-JegF"
#define BLYNK_TEMPLATE_NAME "ESP8266"
#define BLYNK_AUTH_TOKEN "BPRnO3B4iFlsVNrFRKtygQwcjFFhXNS1"

#include <Arduino.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <DHT.h>
#include <BlynkSimpleEsp8266.h>
#include <ESP8266WiFi.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>



// Khai b√°o ch√¢n LED
#define gPIN 15  // LED xanh
#define yPIN 2   // LED v√†ng
#define rPIN 5   // LED ƒë·ªè

// Khai b√°o ch√¢n c·∫£m bi·∫øn DHT11
#define dhtPIN 4    // ƒê·ªïi t·ª´ GPIO16 sang GPIO4 (D2 tr√™n NodeMCU)
#define dhtTYPE DHT11

// Khai b√°o ch√¢n OLED
#define OLED_SDA 13
#define OLED_SCL 12

// Th√¥ng tin WiFi
#define WIFI_SSID "3567"
#define WIFI_PASS "12345678"

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
U8G2_SH1106_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
DHT dht(dhtPIN, dhtTYPE);
BlynkTimer timer;

// Initialize Telegram BOT
#define BOTtoken "7261282557:AAGoLbHh6Z6xmp-b8KwPVN89zIXYuMK2VpY"  // your Bot Token (Get from Botfather)

// D√πng ChatGPT ƒë·ªÉ nh·ªù h∆∞·ªõng d·∫´n t√¨m gi√° tr·ªã GROUP_ID n√†y
#define GROUP_ID "-4710463542" //th∆∞·ªùng l√† m·ªôt s·ªë √¢m

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

// Bi·∫øn l∆∞u tr·∫°ng th√°i
bool yellowBlink = false;
unsigned long startTime;
float fHumidity = 0.0;
float fTemperature = 0.0;
unsigned long lastAlertTime = 0;
const unsigned long alertInterval = 5 * 60 * 1000; // 5 ph√∫t
bool trafficLightsEnabled = true; // M·∫∑c ƒë·ªãnh ƒë√®n giao th√¥ng ho·∫°t ƒë·ªông



// X·ª≠ l√Ω n√∫t tr√™n Blynk (V0 b·∫≠t/t·∫Øt LED v√†ng)
BLYNK_WRITE(V3) {
  yellowBlink = param.asInt();
}

// Khai b√°o tr∆∞·ªõc c√°c h√†m
void ThreeLedBlink();
void updateDHT();
void sendUptimeToBlynk();
void checkWiFiConnection();

void setup() {
  Serial.begin(115200);

  // C·∫•u h√¨nh ch√¢n ƒë·∫ßu ra
  pinMode(gPIN, OUTPUT);
  pinMode(yPIN, OUTPUT);
  pinMode(rPIN, OUTPUT);

  // Kh·ªüi ƒë·ªông OLED
  Wire.begin(OLED_SDA, OLED_SCL);
  oled.begin();
  oled.clearBuffer();
  oled.setFont(u8g2_font_unifont_t_vietnamese1);
  oled.drawUTF8(0, 14, "Tr∆∞·ªùng ƒêHKH");
  oled.drawUTF8(0, 28, "Khoa CNTT");
  oled.drawUTF8(0, 42, "HN Th√†nh CNPM");
  oled.sendBuffer();

  // K·∫øt n·ªëi WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  checkWiFiConnection();

  // Kh·ªüi ƒë·ªông Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_SSID, WIFI_PASS);
  dht.begin();
  startTime = millis();

  // Thi·∫øt l·∫≠p timer
  timer.setInterval(1000L, ThreeLedBlink);
  timer.setInterval(2000L, updateDHT);
  timer.setInterval(5000L, sendUptimeToBlynk);
}

void checkAndSendAlert() {
  unsigned long currentTime = millis();
  
  if (currentTime - lastAlertTime < alertInterval) {
    return; // Ch·ªâ g·ª≠i c·∫£nh b√°o m·ªói 5 ph√∫t
  }

  String alertMessage = "";

  // Ki·ªÉm tra ng∆∞·ª°ng nhi·ªát ƒë·ªô
  if (fTemperature < 10) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: Nhi·ªát ƒë·ªô qu√° th·∫•p (<10¬∞C) - Nguy c∆° h·∫° th√¢n nhi·ªát!\n";
  } else if (fTemperature >= 10 && fTemperature < 15) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: Nhi·ªát ƒë·ªô th·∫•p (10-15¬∞C) - Nguy c∆° m·∫Øc b·ªánh h√¥ h·∫•p!\n";
  } else if (fTemperature >= 30 && fTemperature <= 35) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: Nhi·ªát ƒë·ªô cao (30-35¬∞C) - C∆° th·ªÉ m·∫•t n∆∞·ªõc, m·ªát m·ªèi!\n";
  } else if (fTemperature > 35 && fTemperature <= 40) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: Nhi·ªát ƒë·ªô nguy hi·ªÉm (>35¬∞C) - Nguy c∆° say n·∫Øng, chu·ªôt r√∫t!\n";
  } else if (fTemperature > 40) {
    alertMessage += "üö® Nguy hi·ªÉm: Nhi·ªát ƒë·ªô c·ª±c cao (>40¬∞C) - Nguy c∆° suy n·ªôi t·∫°ng, ƒë·ªôt qu·ªµ nhi·ªát!\n";
  }

  // Ki·ªÉm tra ng∆∞·ª°ng ƒë·ªô ·∫©m
  if (fHumidity < 30) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: ƒê·ªô ·∫©m th·∫•p (<30%) - Da kh√¥, k√≠ch ·ª©ng m·∫Øt, tƒÉng nguy c∆° b·ªánh h√¥ h·∫•p!\n";
  } else if (fHumidity > 70 && fHumidity <= 80) {
    alertMessage += "‚ö†Ô∏è C·∫£nh b√°o: ƒê·ªô ·∫©m cao (>70%) - TƒÉng nguy c∆° n·∫•m m·ªëc, vi khu·∫©n ph√°t tri·ªÉn!\n";
  } else if (fHumidity > 80) {
    alertMessage += "üö® Nguy hi·ªÉm: ƒê·ªô ·∫©m c·ª±c cao (>80%) - C·∫£m gi√°c oi b·ª©c, kh√≥ th·ªü, nguy c∆° s·ªëc nhi·ªát!\n";
  }

  // N·∫øu c√≥ c·∫£nh b√°o, g·ª≠i l√™n Telegram
  if (alertMessage.length() > 0) {
    alertMessage = "üì¢ [C·∫¢NH B√ÅO]\n" + alertMessage;
    bot.sendMessage(GROUP_ID, alertMessage, "");
    Serial.println("‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o ƒë·∫øn Telegram!");
    lastAlertTime = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i c·∫£nh b√°o cu·ªëi c√πng
  }
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;

    Serial.println("üì© Tin nh·∫Øn m·ªõi t·ª´ Telegram: " + text);

    if (text == "/traffic_off") {
      trafficLightsEnabled = false;
      digitalWrite(gPIN, LOW);
      digitalWrite(yPIN, LOW);
      digitalWrite(rPIN, LOW);
      bot.sendMessage(chat_id, "üö¶ ƒê√®n giao th√¥ng ƒë√£ t·∫Øt!", "");
    } 
    else if (text == "/traffic_on") {
      trafficLightsEnabled = true;
      bot.sendMessage(chat_id, "üö¶ ƒê√®n giao th√¥ng ho·∫°t ƒë·ªông tr·ªü l·∫°i!", "");
    }
  }
}

// H√†m ki·ªÉm tra k·∫øt n·ªëi WiFi
void checkWiFiConnection() {
  Serial.print("ƒêang k·∫øt n·ªëi WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
  } else {
    Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
  }

  client.setInsecure(); // B·ªè qua ch·ª©ng ch·ªâ SSL
  if (bot.sendMessage(GROUP_ID, "ü§ñ Bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!", "")) {
    Serial.println("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram!");
  } else {
    Serial.println("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn Telegram!");
  }
}

// ƒêi·ªÅu khi·ªÉn LED nh·∫•p nh√°y
void ThreeLedBlink() {

  if (!trafficLightsEnabled) return; // N·∫øu ƒë√®n ƒëang t·∫Øt, tho√°t kh·ªèi h√†m

  static int currentLed = 0;
  static unsigned long lastTimer = 0;

  if (yellowBlink) {
    if (millis() - lastTimer >= 500) {
      digitalWrite(gPIN, LOW);
      digitalWrite(rPIN, LOW);
      digitalWrite(yPIN, !digitalRead(yPIN)); // Nh·∫•p nh√°y LED v√†ng
      lastTimer = millis();
    }
  } else {
    static const int ledPin[3] = {gPIN, yPIN, rPIN};
    if (millis() - lastTimer >= 1000) {
      digitalWrite(ledPin[(currentLed + 2) % 3], LOW);
      digitalWrite(ledPin[currentLed], HIGH);
      currentLed = (currentLed + 1) % 3;
      lastTimer = millis();
    }
  }
}

// C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn DHT11
void updateDHT() {
  //float h = dht.readHumidity();
  //float t = dht.readTemperature();
  float h = random(0,1001) / 10.0;
  float t = random(-400, 801) / 10.0; 

  if (isnan(h) || isnan(t)) {
    Serial.println("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn DHT!");
    return;
  }

  fTemperature = t;
  fHumidity = h;

  Serial.printf("üå°Ô∏è Nhiet do: %.1f¬∞C | üíß Do am: %.1f%%\n", fTemperature, fHumidity);

  // Hi·ªÉn th·ªã l√™n OLED
  oled.clearBuffer();
  oled.setCursor(0, 20);
  oled.printf("Nhiet do: %.1f¬∞C", fTemperature);
  oled.setCursor(0, 40);
  oled.printf("Do am: %.1f%%", fHumidity);
  oled.sendBuffer();

  // G·ª≠i d·ªØ li·ªáu l√™n Blynk
  Blynk.virtualWrite(V1, fTemperature);
  Blynk.virtualWrite(V2, fHumidity);

  // Ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o n·∫øu c·∫ßn
  checkAndSendAlert();
}

// G·ª≠i th·ªùi gian ch·∫°y l√™n Blynk
void sendUptimeToBlynk() {
  Blynk.virtualWrite(V0, (int)((millis() - startTime) / 1000));
}


// Loop ch√≠nh
void loop() {
  Blynk.run();
  timer.run();

  if (millis() % 1000 == 0) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    if (numNewMessages) {
      handleNewMessages(numNewMessages);
    }
  }
}