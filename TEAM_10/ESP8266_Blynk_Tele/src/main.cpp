#include <Arduino.h>
#include "utils.h"
#include <DHT.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <UniversalTelegramBot.h>

// Th√¥ng tin Blynk
//Nguy·ªÖn Tr·∫ßn Vi·∫øt Th·∫Øng
#define BLYNK_TEMPLATE_ID "TMPL61bYE-l65"
#define BLYNK_TEMPLATE_NAME "ESP8266BlynkTele"
#define BLYNK_AUTH_TOKEN "5KUjzDBJEUFuI-cDkeTE-A3ziMAvZMQE"

#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <BlynkSimpleEsp8266.h>

// Wokwi s·ª≠ d·ª•ng m·∫°ng WiFi "Wokwi-GUEST" kh√¥ng c·∫ßn m·∫≠t kh·∫©u cho vi·ªác ch·∫°y m√¥ ph·ªèng
char ssid[] = "Wokwi-GUEST"; // T√™n m·∫°ng WiFi
char pass[] = "";            // M·∫≠t kh·∫©u m·∫°ng WiFi

// C·∫•u h√¨nh ph·∫ßn c·ª©ng
#define gPIN 15  // LED xanh
#define yPIN 2   // LED v√†ng
#define rPIN 5   // LED ƒë·ªè
#define dhtPIN 16
#define dhtTYPE DHT11
#define OLED_SDA 13
#define OLED_SCL 12

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
U8G2_SH1106_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/U8X8_PIN_NONE);
DHT dht(dhtPIN, dhtTYPE);


// Th√¥ng tin Telegram
//Nguy·ªÖn Tr·∫ßn Vi·∫øt Th·∫Øng
const char* botToken = "7958454010:AAGYkVfTHc-FgAg-YqOMgIo5CR-DRgvMB-I";
const char* chatID = "-4717614518";

//Tr·∫ßn VƒÉn Minh Nh·∫≠t
#define BOTtoken "7467700827:AAG5Jr3HcVMIdNTKWF4_DBsQXK0BnncU0dM"  // your Bot Token (Get from Botfather)
#define GROUP_ID "-4725634280" //th∆∞·ªùng l√† m·ªôt s·ªë √¢m

WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);

bool buttonState = false;

void setup()
{
  Serial.begin(115200);
  pinMode(gPIN, OUTPUT);
  pinMode(yPIN, OUTPUT);
  pinMode(rPIN, OUTPUT);

  digitalWrite(gPIN, LOW);
  digitalWrite(yPIN, LOW);
  digitalWrite(rPIN, LOW);

  dht.begin();
  Wire.begin(OLED_SDA, OLED_SCL);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  client.setInsecure();

  // Ki·ªÉm tra k·∫øt n·ªëi WiFi
  Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");

  Blynk.virtualWrite(V3, buttonState);
  oled.begin();
  oled.clearBuffer();
  oled.setFont(u8g2_font_unifont_t_vietnamese1);
  oled.drawUTF8(0, 14, "Tr∆∞·ªùng ƒêHKH");
  oled.drawUTF8(0, 28, "Khoa CNTT");
  oled.drawUTF8(0, 42, "L·∫≠p tr√¨nh IoT");
  oled.sendBuffer();

  bot.sendMessage(chatID, "ESP8266 IoT ƒë√£ kh·ªüi ƒë·ªông!");
}

void updateDHT()
{
  static ulong lastTimer = 0;
  if (!IsReady(lastTimer, 10000)) return;

  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc c·∫£m bi·∫øn DHT!");
    return;
  }

  Blynk.virtualWrite(V1, t);
  Blynk.virtualWrite(V2, h);

  static ulong lastTimeTele = 0;
  if (!IsReady(lastTimeTele, 300000)) return;

  bot.sendMessage(chatID, StringFormat("üå° Nhi·ªát ƒë·ªô: %.2f¬∞C", t));
  bot.sendMessage(chatID, StringFormat("üíß ƒê·ªô ·∫©m: %.2f%%", h));
}

void checkTelegramMessages()
{
  int messageCount = bot.getUpdates(bot.last_message_received + 1);
  if (messageCount == 0) return;
  
  while (messageCount)
  {
    for (int i = 0; i < messageCount; i++)
    {
      String text = bot.messages[i].text;
      Serial.println("üì© Tin nh·∫Øn t·ª´ Telegram: " + text);
      
      if (text == "/traffic_off")
      {
        digitalWrite(gPIN, LOW);
        digitalWrite(yPIN, LOW);
        digitalWrite(rPIN, LOW);
        bot.sendMessage(chatID, "üö¶ ƒê√®n giao th√¥ng ƒë√£ T·∫ÆT!");
      }
      else if (text == "/traffic_on")
      {
        digitalWrite(gPIN, HIGH);
        bot.sendMessage(chatID, "üö¶ ƒê√®n giao th√¥ng ƒëang B·∫¨T!");
      }
      else
      {
        bot.sendMessage(chatID, "‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! H√£y g·ª≠i /traffic_on ho·∫∑c /traffic_off.");
      }
    }
    messageCount = bot.getUpdates(bot.last_message_received + 1);
  }
}

void loop()
{
  Blynk.run();
  updateDHT();
  checkTelegramMessages();
}
