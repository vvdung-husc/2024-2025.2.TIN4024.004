#include <Arduino.h>
#include <TM1637Display.h> // Th∆∞ vi·ªán ƒëi·ªÅu khi·ªÉn TM1637

// TRAN HOAI DUC
#define BLYNK_TEMPLATE_ID "TMPL6v_xsCQM5"
#define BLYNK_TEMPLATE_NAME "ESP3 LED TM1637"
#define BLYNK_AUTH_TOKEN "Z-8JgCxE9v9KvwKIAB9dUrwQpEOyY2Rr"

// NGUYEN QUANG HUY
#define BLYNK_TEMPLATE_ID "TMPL6fc0FgBst"
#define BLYNK_TEMPLATE_NAME "ESP32 Traffic Blynk"
#define BLYNK_AUTH_TOKEN "S_uZAuR4Lh0Yy4rxzZTi2p3QaSZ10jX6"

// HO PHUOC THAI
//  #define BLYNK_TEMPLATE_ID "TMPL65LJA8v6C"
//  #define BLYNK_TEMPLATE_NAME "TrafficBlynk"
//  #define BLYNK_AUTH_TOKEN "4S1HvPEtHMoVDwcMLDlX92kNawqRBed4"

// NGUYEN DINH QUAN
#define BLYNK_TEMPLATE_ID "TMPL6doIf-emq"
#define BLYNK_TEMPLATE_NAME "ESMART"
#define BLYNK_AUTH_TOKEN "WDUBaVmcVnEYcgG4ijgys67IltCGmU6x"

// NGUYEN DUC KHANH
#define BLYNK_TEMPLATE_ID "TMPL69Hubiw5q"
#define BLYNK_TEMPLATE_NAME "nduckhanh1"
#define BLYNK_AUTH_TOKEN "S4MKiJT7JdJf6qTBsK75WjLOB4QjDd4f"

// Ph·∫£i ƒë·ªÉ tr∆∞·ªõc khai b√°o s·ª≠ d·ª•ng th∆∞ vi·ªán Blynk

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>

#define DHTPIN 16     // Ch√¢n GPIO k·∫øt n·ªëi c·∫£m bi·∫øn DHT22
#define DHTTYPE DHT22 // Lo·∫°i c·∫£m bi·∫øn
DHT dht(DHTPIN, DHTTYPE);

// Wokwi s·ª≠ d·ª•ng m·∫°ng WiFi "Wokwi-GUEST" kh√¥ng c·∫ßn m·∫≠t kh·∫©u cho vi·ªác ch·∫°y m√¥ ph·ªèng
char ssid[] = "Wokwi-GUEST"; // T√™n m·∫°ng WiFi
char pass[] = "";            // M·∫≠t kh·∫©u m·∫°ng WiFi

#define btnBLED 23 // Ch√¢n k·∫øt n·ªëi n√∫t b·∫•m
#define pinBLED 21 // Ch√¢n k·∫øt n·ªëi ƒë√®n xxanh

#define CLK 18 // Ch√¢n k·∫øt n·ªëi CLK c·ªßa TM1637
#define DIO 19 // Ch√¢n k·∫øt n·ªëi DIO c·ªßa TM1637

// Kh·ªüi t·∫°o m√† h√¨nh TM1637
TM1637Display display(CLK, DIO);
BlynkTimer timer; // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng timer

// Pin LED
#define rLED 27
#define yLED 26
#define gLED 25

// Pin - C·∫£m bi·∫øn quang ƒëi·ªán tr·ªü
#define ldrPIN 33
#define LDR_THRESHOLD 1000 // Ng∆∞·ª°ng √°nh s√°ng ƒë·ªÉ ph√°t hi·ªán tr·ªùi t·ªëi
bool nightMode = false;    // Bi·∫øn ki·ªÉm tra c√≥ b·∫≠t ch·∫ø ƒë·ªô ƒë√®n v√†ng nh·∫•p nh√°y kh√¥ng

// Th·ªùi gian ƒë√®n (ms)
uint rTIME = 5000;  // 5 gi√¢y
uint yTIME = 3000;  // 3 gi√¢y
uint gTIME = 10000; // 10 gi√¢y

// Bi·∫øn to√†n c·ª•c

// Bi·∫øn th·ªùi gian
ulong currentMiliseconds = 0; // th·ªùi gian hi·ªán t·∫°i
ulong nextTimeTotal = 0;      // bi·∫øn t·ªïng - ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã
ulong ledTimeStart = 0;
int currentLED = 0;           // ƒë√®n led hi·ªán t·∫°i ƒëang s√°ngs√°ng
int tmCounter = rTIME / 1000; // Bi·∫øn ƒë·∫øm ng∆∞·ª£c tr√™n b·∫£ng
ulong counterTime = 0;        // Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
bool blueButtonON = true;     // Tr·∫°ng th√°i c·ªßa n√∫t b·∫•m ON -> ƒë√®n Xanh s√°ng v√† hi·ªÉn th·ªã LED TM1637
int ldrThreshold = 1000;      // Gi√° tr·ªã m·∫∑c ƒë·ªãnh, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ª´ Blynk

bool IsReady(ulong &ulTimer, uint32_t milisecond);
void NonBlocking_Traffic_Light();
void NonBlocking_Traffic_Light_TM1637();
bool IsReady(ulong &ulTimer, uint32_t milisecond);
void updateBlueButton();
void uptimeBlynk();

void sendSensorData()
{
  float temperature = dht.readTemperature(); // ƒê·ªçc nhi·ªát ƒë·ªô
  float humidity = dht.readHumidity();       // ƒê·ªçc ƒë·ªô ·∫©m

  if (isnan(temperature) || isnan(humidity))
  {
    Serial.println("L·ªói ƒë·ªçc c·∫£m bi·∫øn!");
    return;
  }

  Serial.print("Nhi·ªát ƒë·ªô: ");
  Serial.print(temperature);
  Serial.print("¬∞C - ƒê·ªô ·∫©m: ");
  Serial.print(humidity);
  Serial.println("%");

  Blynk.virtualWrite(V2, temperature); // G·ª≠i nhi·ªát ƒë·ªô l√™n Blynk (V2)
  Blynk.virtualWrite(V3, humidity);    // G·ª≠i ƒë·ªô ·∫©m l√™n Blynk (V3)
}

void checkLDR()
{
  static ulong lastCheck = 0;
  static int lastLDRValue = -1; // L∆∞u gi√° tr·ªã c≈© c·ªßa LDR

  if (!IsReady(lastCheck, 2000))
    return; // Ki·ªÉm tra m·ªói 2 gi√¢y

  int ldrValue = analogRead(ldrPIN);

  if (ldrValue != lastLDRValue)
  { // Ch·ªâ c·∫≠p nh·∫≠t khi c√≥ thay ƒë·ªïi
    lastLDRValue = ldrValue;
    Serial.print("Gi√° tr·ªã LDR: ");
    Serial.println(ldrValue);
    Blynk.virtualWrite(V4, ldrThreshold); // C·∫≠p nh·∫≠t ng∆∞·ª°ng l√™n Blynk

    if (ldrValue < ldrThreshold)
    { // N·∫øu tr·ªùi t·ªëi
      if (!nightMode)
      {
        Serial.println("BAN ƒê√äM: ƒê√®n v√†ng nh·∫•p nh√°y");
        nightMode = true;
      }
    }
    else
    { // N·∫øu tr·ªùi s√°ng
      if (nightMode)
      {
        Serial.println("BAN NG√ÄY: ƒê√®n giao th√¥ng b√¨nh th∆∞·ªùng");
        nightMode = false;
      }
    }
  }
}

BLYNK_WRITE(V4)
{
  int newThreshold = param.asInt();
  if (newThreshold != ldrThreshold)
  { // Tr√°nh c·∫≠p nh·∫≠t l·∫∑p l·∫°i v√¥ h·∫°n
    ldrThreshold = newThreshold;
    Serial.print("C·∫≠p nh·∫≠t ng∆∞·ª°ng LDR t·ª´ Blynk: ");
    Serial.println(ldrThreshold);

    // Ki·ªÉm tra ngay l·∫≠p t·ª©c tr·ªùi s√°ng hay t·ªëi
    int ldrValue = analogRead(ldrPIN);
    Serial.print("Gi√° tr·ªã LDR hi·ªán t·∫°i: ");
    Serial.println(ldrValue);

    if (ldrValue < ldrThreshold)
    { // Tr·ªùi t·ªëi
      if (!nightMode)
      {
        Serial.println("BAN ƒê√äM: ƒê√®n v√†ng nh·∫•p nh√°y");
        nightMode = true;
      }
    }
    else
    { // Tr·ªùi s√°ng
      if (nightMode)
      {
        Serial.println("BAN NG√ÄY: ƒê√®n giao th√¥ng b√¨nh th∆∞·ªùng");
        nightMode = false;
      }
    }
  }
}

void blinkYellowLight()
{
  static ulong lastBlink = 0;
  static bool ledState = false;

  if (IsReady(lastBlink, 500))
  { // Nh·∫•p nh√°y m·ªói 500ms
    ledState = !ledState;
    digitalWrite(rLED, LOW);
    digitalWrite(gLED, LOW);
    digitalWrite(pinBLED, LOW);
    digitalWrite(yLED, ledState ? HIGH : LOW);
    display.clear(); // X√≥a m√†n h√¨nh TM1637 khi ·ªü ch·∫ø ƒë·ªô nh·∫•p nh√°y
  }
}
void setup()
{
  Serial.begin(115200);
  pinMode(rLED, OUTPUT);
  pinMode(yLED, OUTPUT);
  pinMode(gLED, OUTPUT);
  pinMode(pinBLED, OUTPUT); // Th√™m khai b√°o n√†y

  digitalWrite(yLED, LOW);
  digitalWrite(gLED, LOW);
  digitalWrite(rLED, HIGH);
  digitalWrite(pinBLED, LOW); // ƒê·∫£m b·∫£o ƒë√®n t·∫Øt ban ƒë·∫ßu
  currentLED = rLED;
  display.setBrightness(0x0f);
  dht.begin();

  // Start the WiFi connection
  Serial.print("Connecting to ");
  Serial.println(ssid);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass); // K·∫øt n·ªëi ƒë·∫øn m·∫°ng WiFi

  Serial.println();
  Serial.println("WiFi connected");

  Serial.println("== START ==>");
  Serial.print("1. RED    => GREEN  ");
  Serial.print(rTIME / 1000);
  Serial.println(" (s)");
  digitalWrite(pinBLED, blueButtonON ? HIGH : LOW);
  Blynk.virtualWrite(V1, blueButtonON); // ƒê·ªìng b·ªô tr·∫°ng th√°i tr·∫°ng th√°i c·ªßa ƒë√®n v·ªõi Blynk
  // G·ª≠i gi√° tr·ªã ng∆∞·ª°ng LDR l√™n Blynk sau khi k·∫øt n·ªëi
  Blynk.virtualWrite(V4, ldrThreshold);
  // G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn m·ªói 2 gi√¢y
  timer.setInterval(2000L, sendSensorData);
}
void loop()
{
  Blynk.run();
  currentMiliseconds = millis();
  uptimeBlynk();
  updateBlueButton();

  checkLDR(); // Ki·ªÉm tra c·∫£m bi·∫øn √°nh s√°ng
  if (blueButtonON)
  {
    digitalWrite(pinBLED, HIGH); // B·∫≠t ƒë√®n
  }
  else
  {
    digitalWrite(pinBLED, LOW); // T·∫Øt ƒë√®n
  }

  if (nightMode)
  {
    blinkYellowLight(); // Ch·∫°y ch·∫ø ƒë·ªô ƒë√®n v√†ng nh·∫•p nh√°y
  }
  else
  {
    NonBlocking_Traffic_Light(); // Ch·∫°y ch·∫ø ƒë·ªô ƒë√®n giao th√¥ng b√¨nh th∆∞·ªùng
    NonBlocking_Traffic_Light_TM1637();
  }

  timer.run();
}

// Ki·ªÉm tra th·ªùi gian kh√¥ng ch·∫∑n (non-blocking)
bool IsReady(ulong &ulTimer, uint32_t milisecond)
{
  if (currentMiliseconds - ulTimer < milisecond)
    return false;
  ulTimer = currentMiliseconds;
  return true;
}

// X·ª≠ l√Ω ƒë√®n giao th√¥ng
void NonBlocking_Traffic_Light()
{
  switch (currentLED)
  {
  case rLED: // ƒê√®n ƒë·ªè
    if (IsReady(ledTimeStart, rTIME))
    {
      digitalWrite(rLED, LOW);
      digitalWrite(gLED, HIGH);
      currentLED = gLED;
      tmCounter = gTIME / 1000; // Chuy·ªÉn sang ƒë·∫øm ng∆∞·ª£c ƒë√®n xanh
      Serial.print("2. GREEN  => YELLOW ");
      Serial.print(gTIME / 1000);
      Serial.println(" (s)");
    }
    break;

  case gLED: // ƒê√®n xanh
    if (IsReady(ledTimeStart, gTIME))
    {
      digitalWrite(gLED, LOW);
      digitalWrite(yLED, HIGH);
      currentLED = yLED;
      tmCounter = yTIME / 1000; // Chuy·ªÉn sang ƒë·∫øm ng∆∞·ª£c ƒë√®n v√†ng
      Serial.print("3. YELLOW => RED    ");
      Serial.print(yTIME / 1000);
      Serial.println(" (s)");
    }
    break;

  case yLED: // ƒê√®n v√†ng
    if (IsReady(ledTimeStart, yTIME))
    {
      digitalWrite(yLED, LOW);
      digitalWrite(rLED, HIGH);
      currentLED = rLED;
      tmCounter = rTIME / 1000; // Chuy·ªÉn v·ªÅ ƒë·∫øm ng∆∞·ª£c ƒë√®n ƒë·ªè
      Serial.print("1. RED    => GREEN  ");
      Serial.print(rTIME / 1000);
      Serial.println(" (s)");
    }
    break;
  }
}

// üîπ H√†m b·∫≠t/t·∫Øt pinBLED c√πng v·ªõi TM1637
void updateBlueButton()
{
  static ulong lastTime = 0;
  static int lastValue = HIGH;
  if (!IsReady(lastTime, 50))
    return;
  int v = digitalRead(btnBLED);
  if (v == lastValue)
    return;
  lastValue = v;
  if (v == LOW)
    return;

  blueButtonON = !blueButtonON; // ƒê·∫£o tr·∫°ng th√°i ƒë√®n

  Serial.println(blueButtonON ? "Blue Light ON" : "Blue Light OFF");
  digitalWrite(pinBLED, blueButtonON ? HIGH : LOW);
  Blynk.virtualWrite(V1, blueButtonON); // ƒê·ªìng b·ªô v·ªõi Blynk

  if (!blueButtonON)
    display.clear();
}
void uptimeBlynk()
{
  static ulong lastTime = 0;
  if (!IsReady(lastTime, 1000))
    return; // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t lastTime sau m·ªói 1 gi√¢y
  ulong value = lastTime / 1000;
  Blynk.virtualWrite(V0, value); // G·ª≠i gi√° tr·ªã l√™n ch√¢n ·∫£o V0 tr√™n ·ª©ng d·ª•ng Blynk.
}

// ƒë∆∞·ª£c g·ªçi m·ªói khi c√≥ d·ªØ li·ªáu m·ªõi ƒë∆∞·ª£c g·ª≠i t·ª´ ·ª©ng d·ª•ng Blynk ƒë·∫øn thi·∫øt b·ªã.
BLYNK_WRITE(V1)
{ // virtual_pin ƒë·ªãnh nghƒ©a trong ·ª©ng d·ª•ng Blynk
  // X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ ·ª©ng d·ª•ng Blynk
  blueButtonON = param.asInt(); // L·∫•y gi√° tr·ªã t·ª´ ·ª©ng d·ª•ng Blynk
  if (blueButtonON)
  {
    Serial.println("Blynk -> Blue Light ON");
    digitalWrite(pinBLED, HIGH);
  }
  else
  {
    Serial.println("Blynk -> Blue Light OFF");
    digitalWrite(pinBLED, LOW);
    display.clear();
  }
}
// Hi·ªÉn th·ªã th·ªùi gian tr√™n TM1637 v√† ƒë·ªìng b·ªô v·ªõi pinBLED
void NonBlocking_Traffic_Light_TM1637()
{
  static ulong lastUpdate = 0;
  if (!IsReady(lastUpdate, 1000))
    return;

  tmCounter--;
  if (tmCounter < 0)
  {
    if (currentLED == rLED)
      tmCounter = gTIME / 1000;
    else if (currentLED == gLED)
      tmCounter = yTIME / 1000;
    else if (currentLED == yLED)
      tmCounter = rTIME / 1000;
  }

  if (blueButtonON)
  {
    display.showNumberDec(tmCounter, false, 2, 2);
    digitalWrite(pinBLED, HIGH); // B·∫≠t ƒë√®n khi TM1637 hi·ªÉn th·ªã
  }
  else
  {
    display.clear();
    digitalWrite(pinBLED, LOW); // T·∫Øt ƒë√®n khi TM1637 t·∫Øt
  }
}